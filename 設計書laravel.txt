設計書

◆目的：Laravelアプリケーション開発の時短
◆目標：デザインから画面遷移を数分で実装する


◆Laravelアプリケーションの構成：
	⑴MVCモデル（Modelが曖昧な）
	⑵Struts比較(あっているか不明、主観)
		view:
			JSP				/	Bladeテンプレート
								resource
		controller
			Struts.xml,RquestController	/	Route.php
		model(controller)
			Action				/	Controller,EloquentModel
	⑶Laravel制作者も行っている通り、ModelというものがStrutsの時点でも明確な定義を持っていない、と思える。
◆Laravelアプリケーションの開発プロセス：
	⑴デザイン→blade(View)/resource
		（デザイナーの）作成したデザイン（プロトタイプ・紙芝居）をhtmlをbladeにして、
		css/jsをpublicフォルダに振り分ける。
	⑵ルーティング→route.php(Controller1)/controller(Controller2)
		aタグやsubmitボタンによる画面遷移をroute.phpに記載する。
		URLとControllerを結びつける。
	⑶モデリング→model/migration
		画面から動的に生成する情報やアプリケーションに必要なモデルを設計、
		Modelを継承したクラスを実装、DBを構築する。
	⑷ビューへモデルの反映→controller/service/blade
		ControllerもしくはServiceでModelを構築するようにプログラムする。
		動的に生成する形にした情報を表示するようにbladeを変更する。
	※認証・validateなどその他機能はあるが、単純にアプリケーションの動きとしては上記を理解すれば作れる。

◆上記⑴〜⑶の工程のほとんどを自動化する
	⑴自動化できる根拠：デザインをする際にコンテンツはどのように整理されるか、
		htmlもしくはフォルダ（ディレクトリ）名にコンテンツの概要、名前が集約される。
		htmlとフォルダをリストアップ→画面(ビュー)が分析できる。
		htmlとフォルア名→コンテンツ（モデル）の候補である。
		html内のaタグ→画面遷移（コントローラ）が抽出できる。
	⑵手順：⑴より、コピーとファイル処理により、アプリケーションのテンプレートに必要な情報を追加して、
		ベースとなるプロジェクトを一式生成する。

◆手順詳細（処理設計）：
	⑴抽出：（クラス：ListingFiles,メソッド：ListFiles()）
		選択されたドキュメントのディレクトリ及びファイルをリストに抽出し、cssや画像ファイル,
JavaScriptをリソースとして、
		htmlファイルをビューとしてリストアップする。なお、htmlは全てinde.htmlに変換する。
		index以外の名前のhtml及び、ディレクトリの名前からmodel候補のリストアップを行う。
	⑵一時コピー：（クラス：Copy2LaraTmp,メソッド：copyView()/copyResource()）
		リストアップされたリソースとビューを作業用のlaravelプロジェクトにコピーする。
	⑶リソースファイリング：（クラス：ResourceFiler,メソッド：filing	()）
		リソースについて、このアプリではリソースは以下の３点を指している
		・cssファイル
		・jsファイル
		・画像ファイル
		ファイルの種類となるとさらに増えるが、上記３点をpublicフォルダにコピーする
	⑷ビューファイリング：（クラス：ViewFiler、メソッド：filing（））
		laravelではbladeテンプレートを使用するが、細かい仕様は省くが、htmlの拡張氏をblade.phpに変更するだけで、テンプレートと認識するのを利用し、ファイル名を変更するとともに、Resource/viewsフォルダへ移動する
	⑸ルート作成：（クラス：RouteCreater、メソッド：create（））
		ActionMappingとかRequestDispacherのような役割をするphpを生成する。
		index.htmlを”/”に対応させて、indexControllerにマッピングさせる。
		その他のURLは基本抽出したmodelの名前のUrlにモデル名Controllerを対応させる。
		上記のRoute記述をweb.phpに書き出す。
	⑹コントローラ作成（クラス：CreateController、メソッド：create（））
		旧Strutsフレームワークでいう、Actionに相当するクラスを作成する。
		⑸で作成したRoute記述に対応するクラスを生成。
	⑺リソースの調整：（クラス：ResourceCoordinator、メソッド：codinate（）、codinateText（））
		ビューの中を操作（スクレイピングみたいな感じ）して、画像ファイルやcssファイルの位置をフレームワークの仕様に適用するように書き換える。
		画面遷移の情報（Aタグ）についても遷移が正しく行われるように調整する。
	⑻生成したコンポーネントをプロジェクトにコピーする
		※Javaで作るのが面倒だったので、シェルコマンドにしている
		⑴から⑺の工程で生成した各種ファイルをプロジェクトの当該フォルダにコピーする。

◆リファクタリング：
	個人的な見解では「しない」、詳細設計の各手順ではかなり共通する処理があり、RubyOnRailsやPHPの各FWで歌われる、
	同じコードを２度書かない、というポリシーは、私の見解では、FWを作る段階でなら、適用すべき、と考える。
	同じコードというのはどういうコードであろうか？私には範囲が明確にわからない。
	FWを適用した開発の場合、基本的にプログラミングの中心となるのは、ロジックであり、コントローラから、よびだされ、動作するリソースである。つまり、これらを部分的に共通化させることは、独立したサービスであるべきロジックがそれぞれ結合度が深くなり、共通部分の仕様変更により、別のサービスの動作不良を呼び起こす。
	また、ここまでライブラリが用意され、アプリケーション開発が簡単になっている中で、たくさんの人数で開発をする場合に、メンテナンス性を考慮した設計をするというのはとても難しい事象である。
	人の作業範囲の分担は、せいぜい画面の機能ごとである。もしくはURLマッピング単位である、とすれば、
	画面の同じイベント内で複数の人間が開発するというのは、どうにも都合が悪い。laravelで言えば、Controller単位で十分である。もちろん複数人で開発することが悪いとは言っていない。
	もし共通化するのであれば、Model以下のクラスは１役割１クラスにしているので、１抽象クラスを作ってそこに同種のメソッドを突っ込んでいけばいい、ぐらいだろうか。

◆WEBアプリ（ApplicationService）にするヒント：
	イベント処理（Listener)と画面（Frame）、ロジックを、分けて作っているので、MVCフレームワークに変換するのは、それほど難しく無いと考える。サービスにする場合、詳細設計各手順を逐一ファイル出力するように変更すると、どのサービスでこけているかが明確になり、ASP展開するにあたって、都合が良さそうであると考える。それぞれスレッドセーフにする必要があるが。
	また、追加機能として、プロジェクトの一時ファイルをリクエストごとに作成するように修正する。
	他の人の作成したデザインと混じってしまうと都合が悪いので、各出力ファイルにセッションIDを付加するなどの処理を追加する。
	プロジェクトファイルをzipで用意して、詳細設計の⑴の処理前に展開する処理を追加する。取り柄えずゴミが溜まるが、小さいプロジェクトなら手で作成すればよかったので、同じプロジェクトファイルを流用してしまっているので、複雑な画面遷移をするアプリなどを変換する場合、訳が分からなくなりそう。
	デプロイの作業も自動化できそうなので、サーバー作成からデプロイまでも実装して、サービスとして自分のプロジェクトが見えるところまでのものができれば、かなり需要がたかそう。
	モデルの管理画面・機能の自動化、アイデアはあるが。。。。

◆足りない機能：コーディングが必要なものは以下のとおり、Wordpressみたいにページを丸ごとDBにブッコム形式にするといいのかな？その場合、モデルごとに色々やる必要はなく、モデルの形はtitleとcontentsとキー情報、履歴情報のみに統一できると思われるが。。。
	モデル自動生成（とりあえずクラス生成でよければ出来る）
		マイグレーション（エンティティ構築）
		シーダー（初期データ構築）
		クラス生成（make:model）
	管理機能自動生成（動作確認なしなら出来そう）
		CRUDメソッド実装（作成・更新・削除、Controllerにメソッドを追加）
		ビューの生成（作成・更新・削除ようblade作成）
		認証機能生成（利用者、管理者、ミドルウェアがよく分からない）
	検証機能生成（validate）
		入力チェック、マイグレーションやシーダーから生成しないと列ごとの検証などが作れない
